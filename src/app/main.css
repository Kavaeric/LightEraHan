/* Fonts */
@font-face {
	font-family: "Source Han Sans HW-JP";
	src:
		local("SourceHanSansHW-VF"),
		url("../fonts/SourceHanSansHW-VF.otf.woff2") format("woff2");
	ascent-override: 100%;
}

@font-face {
	font-family: "Source Han Sans HW-SC";
	src:
		local("SourceHanSansHWSC-VF"),
		url("../fonts/SourceHanSansHWSC-VF.otf.woff2") format("woff2");
	ascent-override: 100%;
}

/* Colour chips */
:root {
	--accent100: #ff5500;
	--red100: #ff5555;
	--red30: rgba(255, 85, 85, .3);
	--red10: rgba(255, 85, 85, .1);

	--white100: #fff;
	--white90: rgba(255, 255, 255, .90);
	--white50: rgba(255, 255, 255, .50);
	--white20: rgba(255, 255, 255, .20);
	--white10: rgba(255, 255, 255, .10);

	--black80: rgba(0, 0, 0, .8);
	--black60: rgba(0, 0, 0, .3);
	--black30: rgba(0, 0, 0, .2);
	--black10: rgba(0, 0, 0, .1);

	/* Second-level chips */
	--backgroundLightFull: var(--white100);
	--backgroundLightHigh: var(--white30);
	--backgroundLightMid: var(--white20);
	--backgroundLightLow: var(--white10);

	--backgroundDarkHigh: var(--black60);
	--backgroundDarkMid: var(--black30);
	--backgroundDarkLow: var(--black10);
	
	--borderLightHigh: var(--white90);
	--borderLightMid: var(--white50);
	--borderLightLow: var(--white10);

	--textLightHigh: var(--white90);
	--textLightMid: var(--white50);
	
	--textDarkHigh: var(--black80);
	
	--linkAccent: var(--accent100);

	--error100: var(--red100);
	--error30: var(--red30);
	--error10: var(--red10);
}

body {
	margin: 0;
	font-family: "Poppins", sans-serif;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;

	color: var(--textLightHigh);
	background-color: #000;
}

div.pageContainer {
	min-height: 100vh;
	display: flex;
	flex-direction: column;
	align-items: stretch;
}

code {
	font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;
}

:lang(ja) {
	font-family: "Source Han Sans HW-JP", sans-serif;
}

:lang(zh-Hans) {
	font-family: "Source Han Sans HW-SC", sans-serif;
}

.contain-width {
	margin: 0 auto;
    max-width: 1200px;
}

a {
	color: var(--linkAccent);
	text-decoration: none;
	transition: all .1s;
}
a:hover,
a:focus {
	background-color: var(--backgroundLightLow);
}
a:active {
	opacity: .5;
}

a.buttonLink,
button {
    border: 2px solid var(--borderLightMid);
	padding: .5em 1.2em;
    background-color: var(--backgroundLightLow);
    
    color: var(--white100);
    font-size: .9rem;
    font-weight: 600;
    font-family: inherit;
    letter-spacing: 0.05em;
    text-transform: uppercase;
	text-align: center;

    transition: all .1s;
}
button:hover, a.buttonLink:hover,
button:focus, a.buttonLink:focus {
    background-color: var(--backgroundLightFull);
    color: var(--textDarkHigh);
    cursor: pointer;
}
button:active, a.buttonLink:active {
    opacity: .5;
}

button:disabled, a.buttonLink:disabled,
button:disabled:hover, a.buttonLink:disabled:hover
button:disabled:active, a.buttonLink:disabled:active {
    border: 1px solid var(--error100);
    background: var(--error10);
    color: var(--error100);
    opacity: .5;
    cursor: not-allowed;
	text-decoration: line-through;
}

/* Placing items inside a button would actually block interaction; this fixes that */
button > * {
    pointer-events: none;
}

p, ul, ol {
	color: var(--textLightMid);
}

ul {
	list-style: square;
}
